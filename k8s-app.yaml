# Déploiement du Worker
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-deployment
spec:
  replicas: 2 # On peut facilement en lancer 2 pour traiter plus de tâches
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
      - name: worker
        image: 2long2read-worker:latest
        imagePullPolicy: Never # Important: K8s utilisera l'image locale
        env:
          - name: MONGO_HOSTNAME
            value: "mongo-service" # On utilise le nom du Service K8s
          - name: RABBITMQ_HOSTNAME
            value: "rabbitmq-service"
          - name: ANTHROPIC_API_KEY # On injecte le secret
            valueFrom:
              secretKeyRef:
                name: claude-api-key-secret
                key: ANTHROPIC_API_KEY
---
# Déploiement de l'API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: 2long2read-api:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8000
        env:
          - name: MONGO_HOSTNAME
            value: "mongo-service"
          - name: RABBITMQ_HOSTNAME
            value: "rabbitmq-service"
---
# Service pour l'API (pour l'exposer à l'extérieur)
apiVersion: v1
kind: Service
metadata:
  name: api-service
  # Labels pour que le ServiceMonitor puisse le découvrir
  labels:
    app: api
  # Annotations pour que Prometheus découvre automatiquement ce service
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '8000'
    prometheus.io/path: '/metrics'
spec:
  type: LoadBalancer # Sur Docker Desktop, cela rend l'API accessible via localhost
  selector:
    app: api
  ports:
    - name: http  # Nom de port pour ServiceMonitor
      protocol: TCP
      port: 8000
      targetPort: 8000