apiVersion: v1
kind: ConfigMap
metadata:
  name: cgu-analysis-dag
  namespace: airflow
data:
  cgu_analysis_dag_working.py: |
    """
    DAG Airflow pour l'analyse des Terms & Conditions Spotify - FIXED VERSION
    Utilise KubernetesPodOperator pour une intégration correcte avec Airflow UI
    """
    import pendulum
    from datetime import timedelta
    from airflow.models.dag import DAG
    from airflow.providers.cncf.kubernetes.operators.pod import KubernetesPodOperator
    from airflow.operators.bash import BashOperator

    default_args = {
        'owner': '2long2read',
        'depends_on_past': False,
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 1,
        'retry_delay': timedelta(minutes=2),
    }

    with DAG(
        dag_id="spotify_cgu_analysis",
        default_args=default_args,
        description="Analyse des CGU Spotify avec Claude AI via KubernetesPodOperator",
        schedule=None,
        start_date=pendulum.datetime(2025, 1, 1, tz="UTC"),
        catchup=False,
        tags=["2long2read", "spotify", "production"],
    ) as dag:

        # Task 1: Analyser les Terms & Conditions Spotify
        analyze_spotify = KubernetesPodOperator(
            task_id="analyze_spotify_terms",
            name="spotify-cgu-worker",
            namespace="airflow",
            image="2long2read-worker:latest",
            image_pull_policy="IfNotPresent",
            cmds=["sh", "-c"],
            arguments=[
                """
                set -e

                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                echo "🎵 ANALYSE SPOTIFY TERMS & CONDITIONS"
                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

                # Générer un task ID unique
                TASK_ID="spotify-$(date +%Y%m%d-%H%M%S)"
                echo "📋 Task ID: $TASK_ID"

                # Créer le contenu depuis la variable d'environnement
                echo "$SPOTIFY_CONTENT" | head -c 10000 > /tmp/spotify_terms.txt
                CONTENT=$(cat /tmp/spotify_terms.txt)
                CONTENT_LENGTH=$(echo "$CONTENT" | wc -c)

                echo "📄 Contenu chargé: $CONTENT_LENGTH caractères"
                echo ""

                # Exécuter l'analyse
                echo "🚀 Lancement de l'analyse..."
                python3 /app/worker.py \
                  --task-id "$TASK_ID" \
                  --source-name "spotify" \
                  --text-content "$CONTENT"

                EXIT_CODE=$?

                if [ $EXIT_CODE -eq 0 ]; then
                    echo ""
                    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                    echo "✅ ANALYSE TERMINÉE AVEC SUCCÈS"
                    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                    echo "💾 Task ID: $TASK_ID"
                    echo "📊 Résultats sauvegardés dans MongoDB"
                    echo "📈 Consultez Grafana pour la visualisation"
                else
                    echo ""
                    echo "❌ ERREUR: L'analyse a échoué (code: $EXIT_CODE)"
                    exit $EXIT_CODE
                fi
                """
            ],
            env_vars={
                "MONGO_HOSTNAME": "mongo-service.default.svc.cluster.local",
                "MONGO_PORT": "27017",
                "ANTHROPIC_API_KEY": "{{ var.value.get('ANTHROPIC_API_KEY', '') }}",
                "SPOTIFY_CONTENT": """Terms and Conditions of Use - Spotify. Last Updated: August 26, 2025. THESE TERMS CONTAIN A MANDATORY ARBITRATION PROVISION THAT REQUIRES THE USE OF ARBITRATION ON AN INDIVIDUAL BASIS TO RESOLVE DISPUTES, RATHER THAN JURY TRIALS OR CLASS ACTIONS. You hereby grant to Spotify a non-exclusive, transferable, sublicensable, royalty-free, fully paid, irrevocable, worldwide license to reproduce, make available, perform and display, translate, modify, create derivative works from, distribute, and otherwise use any such User Content through any medium. We reserve the right to terminate your account at any time without notice or refund. You waive your right to participate in class action lawsuits. Any disputes will be resolved through binding arbitration in our jurisdiction. We may change these terms at any time without notification.""",
            },
            get_logs=True,
            is_delete_operator_pod=True,
            in_cluster=True,
            startup_timeout_seconds=600,
            execution_timeout=timedelta(minutes=12),
        )

        # Task 2: Récupérer et afficher les résultats depuis MongoDB
        get_results = BashOperator(
            task_id="get_mongodb_results",
            bash_command="""
            set -e

            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "💾 RÉCUPÉRATION DES RÉSULTATS MONGODB"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

            # Récupérer le pod MongoDB
            MONGO_POD=$(kubectl get pods -n default -l app=mongo -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

            if [ -z "$MONGO_POD" ]; then
                echo "⚠️  Pod MongoDB non trouvé"
                echo "   Les résultats sont sauvegardés et visibles dans Grafana"
                exit 0
            fi

            echo "📦 Pod MongoDB: $MONGO_POD"
            echo ""
            echo "🔍 Recherche de la dernière analyse Spotify..."
            echo ""

            kubectl exec "$MONGO_POD" -n default -- \
                mongosh too_long_to_read --quiet --eval '
                var doc = db.analytic_reports.find({"source_name": "spotify"}).sort({"_id": -1}).limit(1).toArray()[0];
                if (doc) {
                    print("✅ Analyse trouvée!");
                    print("");
                    print("📋 Task ID: " + doc.task_id);
                    print("📊 Status: " + doc.status);
                    print("");
                    print("🎯 SCORES DE RISQUE:");
                    print("  ├─ Overall Risk: " + doc.report.risk_scores.overall + "/100");
                    print("  ├─ Data Privacy: " + doc.report.risk_scores.data_privacy + "/100");
                    print("  ├─ User Rights: " + doc.report.risk_scores.user_rights + "/100");
                    print("  ├─ Legal Protection: " + doc.report.risk_scores.legal_protection + "/100");
                    print("  ├─ Termination Risk: " + doc.report.risk_scores.termination_risk + "/100");
                    print("  └─ Transparency: " + doc.report.risk_scores.transparency + "/100");
                    print("");
                    print("🔴 Clauses dangereuses: " + doc.report.dangerous_clauses.length);
                } else {
                    print("❌ Aucune analyse Spotify trouvée");
                }
                ' 2>&1 || echo "⚠️  Erreur lors de la récupération"

            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "✅ Analyse complète"
            echo "📊 Consultez Grafana: http://localhost:3000"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            """,
            execution_timeout=timedelta(minutes=2),
        )

        # Définir les dépendances
        analyze_spotify >> get_results
